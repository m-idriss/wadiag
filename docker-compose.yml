#version: "3"

networks:
  diag-net:
    driver: bridge

services:
  diag-log-postgres:
    image: "postgres:16-alpine"
    restart: always
    container_name: diag-log-postgres
    volumes:
      - diag_log_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    expose:
      - "5433"
    environment:
      - POSTGRES_DB=diaglog
      - POSTGRES_USER=diaglog
      - POSTGRES_PASSWORD=diaglog
    networks:
      - diag-net
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-h", "localhost", "-U", "diaglog"]
      interval: 10s
      timeout: 5s
      retries: 3

  diag-postgres:
    image: "postgres:16-alpine"
    restart: always
    container_name: diag-postgres
    volumes:
      - diag_postgres_data:/var/lib/postgresql@16/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=diag
      - POSTGRES_USER=diag
      - POSTGRES_PASSWORD=diag
    networks:
      - diag-net
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-h", "localhost", "-U", "diag"]
      interval: 10s
      timeout: 5s
      retries: 3

  diag-zookeeper:
    image: "bitnami/zookeeper:3.9"
    restart: always
    container_name: diag-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - diag-net

  diag-kafka:
    image: "bitnami/kafka:3.6.1"
    restart: always
    container_name: diag-kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INSIDE://diag-kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: "diag-zookeeper:2181"
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_WAIT_FOR_TOPICS: 600

    links:
      - diag-postgres
      - diag-zookeeper
    depends_on:
      - diag-postgres
      - diag-zookeeper
    networks:
      - diag-net

  diag-log:
    build: ./diag-log
    container_name: diag-log
    restart: always
    environment:
      - PORT=${SPRING_LOG_PORT}
      - DB_SERVER=diag-log-postgres
      - POSTGRES_DB=diaglog
      - POSTGRES_USER=diaglog
      - POSTGRES_PASSWORD=diaglog
    ports:
      - "${SPRING_LOG_PORT}:${SPRING_LOG_PORT}"
    depends_on:
      - diag-log-postgres
    networks:
      - diag-net

  diag-app:
    build: ./diag-app
    container_name: diag-app
    restart: always
    environment:
      - DB_SERVER=diag-postgres
      - POSTGRES_DB=diag
      - POSTGRES_USER=diag
      - POSTGRES_PASSWORD=diag
      - PORT=${SPRING_PORT}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - KAFKA_BOOTSTRAP_SERVERS=diag-kafka:9093

    ports:
      - "${SPRING_PORT}:${SPRING_PORT}"
    links:
      - diag-postgres
      - diag-kafka
    depends_on:
      - diag-postgres
      - diag-kafka
    networks:
      - diag-net

  diag-kafka-console:
    container_name: diag-kafka-console
    image: docker.redpanda.com/vectorized/console:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["diag-kafka:9093"]
    ports:
      - "8086:8080"
    depends_on:
      - diag-kafka
    networks:
      - diag-net

  loki:
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - diag-net
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: always
    volumes:
      - ./monitoring/promtail/promtail-docker-config.yaml:/etc/promtail/docker-config.yaml
      - ./diag-app/logs/spring-boot-logger.log:/var/log/monitoring.log
      - ./diag-log/logs/spring-boot-logger.log:/var/log/monitoring.log
    command: "--config.file=/etc/promtail/docker-config.yaml"
    networks:
      - diag-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - diag-net
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - diag-net
volumes:
  diag_postgres_data:
  diag_log_postgres_data:
